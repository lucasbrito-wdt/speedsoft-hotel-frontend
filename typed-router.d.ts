/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    'root': RouteRecordInfo<'root', '/', Record<never, never>, Record<never, never>>,
    '$error': RouteRecordInfo<'$error', '/:error(.*)', { error: ParamValue<true> }, { error: ParamValue<false> }>,
    'acesso-perfis': RouteRecordInfo<'acesso-perfis', '/acesso/perfis', Record<never, never>, Record<never, never>>,
    'acesso-perfis-components-add-edit-role-dialog': RouteRecordInfo<'acesso-perfis-components-add-edit-role-dialog', '/acesso/perfis/components/AddEditRoleDialog', Record<never, never>, Record<never, never>>,
    'acesso-perfis-components-add-new-user-drawer': RouteRecordInfo<'acesso-perfis-components-add-new-user-drawer', '/acesso/perfis/components/AddNewUserDrawer', Record<never, never>, Record<never, never>>,
    'acesso-perfis-components-role-cards': RouteRecordInfo<'acesso-perfis-components-role-cards', '/acesso/perfis/components/RoleCards', Record<never, never>, Record<never, never>>,
    'acesso-perfis-components-user-list': RouteRecordInfo<'acesso-perfis-components-user-list', '/acesso/perfis/components/UserList', Record<never, never>, Record<never, never>>,
    'acesso-permissoes': RouteRecordInfo<'acesso-permissoes', '/acesso/permissoes', Record<never, never>, Record<never, never>>,
    'acesso-permissoes-components-add-edit-permission-dialog': RouteRecordInfo<'acesso-permissoes-components-add-edit-permission-dialog', '/acesso/permissoes/components/AddEditPermissionDialog', Record<never, never>, Record<never, never>>,
    'apartamento': RouteRecordInfo<'apartamento', '/apartamento', Record<never, never>, Record<never, never>>,
    'apartamento-cadastrar': RouteRecordInfo<'apartamento-cadastrar', '/apartamento/cadastrar', Record<never, never>, Record<never, never>>,
    'apartamento-components-form-apartamento': RouteRecordInfo<'apartamento-components-form-apartamento', '/apartamento/components/form-apartamento', Record<never, never>, Record<never, never>>,
    'apartamento-editar-id': RouteRecordInfo<'apartamento-editar-id', '/apartamento/editar/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'auth-esqueceu-senha': RouteRecordInfo<'auth-esqueceu-senha', '/auth/esqueceu-senha', Record<never, never>, Record<never, never>>,
    'auth-login': RouteRecordInfo<'auth-login', '/auth/login', Record<never, never>, Record<never, never>>,
    'auth-redefinir-senha': RouteRecordInfo<'auth-redefinir-senha', '/auth/redefinir-senha', Record<never, never>, Record<never, never>>,
    'checkin': RouteRecordInfo<'checkin', '/checkin', Record<never, never>, Record<never, never>>,
    'checkin-cadastrar': RouteRecordInfo<'checkin-cadastrar', '/checkin/cadastrar', Record<never, never>, Record<never, never>>,
    'checkin-components-form-checkin': RouteRecordInfo<'checkin-components-form-checkin', '/checkin/components/form-checkin', Record<never, never>, Record<never, never>>,
    'checkin-editar-id': RouteRecordInfo<'checkin-editar-id', '/checkin/editar/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'cliente': RouteRecordInfo<'cliente', '/cliente', Record<never, never>, Record<never, never>>,
    'cliente-cadastrar': RouteRecordInfo<'cliente-cadastrar', '/cliente/cadastrar', Record<never, never>, Record<never, never>>,
    'cliente-components-form-cliente': RouteRecordInfo<'cliente-components-form-cliente', '/cliente/components/form-cliente', Record<never, never>, Record<never, never>>,
    'cliente-editar-id': RouteRecordInfo<'cliente-editar-id', '/cliente/editar/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'empresa': RouteRecordInfo<'empresa', '/empresa', Record<never, never>, Record<never, never>>,
    'empresa-cadastrar': RouteRecordInfo<'empresa-cadastrar', '/empresa/cadastrar', Record<never, never>, Record<never, never>>,
    'empresa-components-form-empresa': RouteRecordInfo<'empresa-components-form-empresa', '/empresa/components/form-empresa', Record<never, never>, Record<never, never>>,
    'empresa-editar-id': RouteRecordInfo<'empresa-editar-id', '/empresa/editar/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'not-authorized': RouteRecordInfo<'not-authorized', '/not-authorized', Record<never, never>, Record<never, never>>,
    'second-page': RouteRecordInfo<'second-page', '/second-page', Record<never, never>, Record<never, never>>,
    'update': RouteRecordInfo<'update', '/update', Record<never, never>, Record<never, never>>,
    'users': RouteRecordInfo<'users', '/users', Record<never, never>, Record<never, never>>,
    'users-cadastrar': RouteRecordInfo<'users-cadastrar', '/users/cadastrar', Record<never, never>, Record<never, never>>,
    'users-components-form-users': RouteRecordInfo<'users-components-form-users', '/users/components/form-users', Record<never, never>, Record<never, never>>,
    'users-editar-id': RouteRecordInfo<'users-editar-id', '/users/editar/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
